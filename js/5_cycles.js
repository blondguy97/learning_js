'use strict';


// в js есть 3 цикла, каждый из них надо использовать в зависимости от ситуации

let num_1 = 50;


while (num_1 <= 55) {
    console.log(num_1);
    num_1++;
}

// цикл будет выполняться пока данные в скобках будут правдивыми, соответствовать true. то есть в этом случае выведется 
// 50
// 51
// 52
// 53
// 54

// то есть в цикле задается вопрос, 50 меньше 55ти, да, то есть true, выводим в консоль 50. С помощью инкремента, увеличиваем на единицу, опять вопрос 51 меньше чем 55? Да, опять вывод в консоль увеличение на единицу. И так далее до 54, ведь вопрос 55 меньше 55ти будет false и цикл закончится.


let num_2 = 50;

do {
    console.log(num_2);
    num_2++;
}
while (num_2 <= 55);

// цикл будет такой же как и предыдущий. Только условие действие задается выше, а условие внизу. Только тут отличие в том что данный цикл выполнится хотя бы один раз. То есть даже если число в условии while будет совсем безумное, даже ниже числа в переменной, условие в do все равно выполнится хотя бы раз.


for (let i = 1; i < 8; i++) {
    console.log(i);
}

// В этом цикле в скобках задается с чего будет начинаться цикл, обычно это переменная i, от слова iterator (то есть увеличиваемое), потом через точку с запятой, условие при котором цикл остановится, а третим аргументом будет шаг цикла, то есть что будет происходить после того как выполнится действие в фигурных скобках

let num = 0;

for (let i = 0; i < 8; i++) {
    console.log(num);
    num = num + 2;
}

// Еще такой пример может быть

// Иногда какой-либо цикл нужно прервать, то циклы необходимо совмещать с условиями, и директивой break


for (let a = 1; a < 10; a++) {
    if (a === 6) {
        break;
    }
    console.log(a);
}

// Когда цикл дойдет до 5ти, он остановится, ведь 6 это уже остановочка. Срабатывает break


// Есть также директива continue, он также доходит до заданного числа, пропускает его и продолжает цикл

for (let b = 1; b <= 10; b++) {
    if (b === 6) {
        continue;
    }
    console.log(b);
}



// Вложенный цикл. Порой нам надо записать цикл в цикле чтобы например перебрать массив или объект в полной мере

for (let i = 0; i < 3; i++) {
    console.log(i);
    for (let j = 0; j < 3; j++) {
        console.log(j);
    }
}

let result = '';

const len = 6;

for (let i = 1; i <= len; i++) {

    for (let j = 0; j < i; j++) {
        result = result + '*';
    }

    result = result + '\n';
}

console.log(result);


first: for (let i = 0; i < 3; i++) {
    console.log(`first level: ${i}`);
    for (let j = 0; j < 3; j++) {
        console.log(`second level: ${j}`);
        for (let k = 0; k < 3; k++) {
            if (k === 2) continue first;
            console.log(`third level: ${k}`);
        }
    }
}


// Задачи:

// 1. При помощи цикла выведите числа от 5 до 10 в консоль. 5 и 10 включительно. Цикл можно использовать любой


// for (let i = 5; i <= 10; i++) {
//     console.log(i);
// }


// let i = 5;

// while(i <= 10) {
//     console.log(i);
//     i++;
// }


// let i = 5;

// do {
//     console.log(i);
//     i++;
// } while (i <= 10)




// 2. При помощи цикла for вывести числа от 20 до 10 в консоль. В обратном порядке (20, 19, 18...). Когда цикл дойдет до числа 13 - остановить весь цикл

// for (let i = 20; i >= 10; i--) {
//     console.log(i);
//     if(i === 13) {
//         break;
//     }
// }


// 3. При помощи цикла for выведите чётные числа от 2 до 10 включительно

for (let i = 1; i <= 10; i++) {
    if (i % 2 !== 0) {
        continue;
    }
    console.log(i);
}

// 4. Перепишите цикл  for на вариант с while. Результат должен остаться точно таким же. Не создайте бесконечный цикл! Иначе браузер может зависнуть.

//  Цикл, который нужно переписать:

//  for (let i = 2; i <= 16; i++) {
//      if (i % 2 === 0) {
//          continue;
//      } else {
//          console.log(i);
//      }
//  }

// let i = 2;

// while (i < 16) {
//     i++;
//     if (i % 2 === 0) {
//         continue;
//     } else {
//         console.log(i);
//     }

// }



/* 5. Заполните новый массив (result) числами из старого (arr). Количество элементов в массиве можно получить как arr.length, а к элементам обращаемся все так же: arr[0], arr[1] и тд.
Должен получиться точно такой же массив 


const arr = [3, 5, 8, 16, 20, 23, 5];

const res = [];

for(let i = 0; i < arr.length; i++) {
    res[i] = arr[i];
}

console.log(res);
*/



/* 6. Измените данный массив так, чтобы все числа были увеличены в 2 раза, а если попадается строка - то к ней было добавлено " - done".
Для определения типа данных используйте typeof();   

const data = [5, 10, 'Shopping', 20, 'Homework'];

Должно получиться: [ 10, 20, 'Shopping - done', 40, 'Homework - done' ]

const data = [5, 10, 'Shopping', 20, 'Homework'];

for(let i = 0; i < data.length; i++) {
    if(typeof data[i] === 'number') {
        data[i] = data[i] * 2;
    }
    else if (typeof data[i === 'string']) {
        data[i] = data[i] + ' - done'
    }
}

console.log(data);
*/


'use strict';

document.addEventListener('DOMContentLoaded', function () {

    /* Промисы или "Обещания" позволяет работать с ассинхронными операциями. Ассинхронный код например у нас в таймаутах
    , то есть когда запускаем что какая то функция у нас выполнится через опрееделенный промежуток времени или будет повторяться через определенный промежуток либо при запросах на сервер когда мы точно не знаем когда нам ответит сервер и операция идет у нас ассинхроно 
    
    
    
    Часто мы в коде хотим сделать последовательность каких то действий если произошло что то то мы обещаем что у нас выполнится следующее действие, например при клике на элемент, выполняется колбэк функция, то есть функции обратного вызова. Однако часто мы встречаемся с тем, что действия должны идти один за другим после выполнения предыдущего
     
    */




console.log('Запрос данных...');

setTimeout(function () {
    console.log('Подготовка данных...');

    const product = {
        name: 'TV',
        price: 2000
    };

    setTimeout(function () {
        product.status = 'order';
        console.log(product);
    }, 2000)
}, 2000) /* И количество callback функций может только разрастаться, что может привести к так называемому между программистами "callback hell", когда 15-20 функций следуют одна за одной. Чтобы не попадасть в тот хэлл, нам и понадобятся промисы */



const req = new Promise(function (resolve, reject) { /* Записываем наш блок кода в новый промис который присваиваем переменной req. Здесь когда мы используем промисы resolve и reject обозначают функции которые мы в будущем можем сами передавать resolve означает что что-то выполнилось правильно, как мы ожидали, reject означает что наше обещание не выполнилось и что то пошло не так*/

    setTimeout(function () {
        console.log('Подготовка данных...');

        const product = {
            name: 'TV',
            price: 2000
        };

        resolve();
   
    }, 2000)



    req.then(function() {
        console.log('Данные получены');
    });

    /* then это метод который выполняется на промисе в случае положительного исхода*/

    setTimeout(function () {
        product.status = 'order';
        console.log(product);
    }, 2000)

});

});
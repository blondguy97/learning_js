//  Еще раз про важность слова return в функциях. Любая функция может вернуть что-то как результат своей работы, а может и ничего не возвращать. Зависит от задачи которую она решает

const usdCurr = 92;
const discount = 0.9;


function convert(amount, course) {
    return amount * course; // Из-за слово return теперь у функции convert есть результат ее работы, умножение некой суммы на сумму нынешнего курса какой-либо валюты
}


function promotion(result) {
	console.log(result * discount);
}


promotion(convert(100, usdCurr)); // функция convert с помощью слова return отдает значение которое создалось в блоке кода. amount умножается на course. Результат умножения и есть то что возвращает функция convert. Чтобы дать функции какие-либо реальные цифры для результата, необходимо вызвать ее и добавить 2 аргумента которые передадутся в параметры функции и будет результат. Далее в функции promotion мы передает только один параметр, "result", а затем при вызове этой самой функции в качестве аргумента мы передает вызов функции convert с уже заданными аргументами.


let res = convert(100, usdCurr);

promotion(res); // Часто бывает и так, что создают какую-то промежуточную переменную, как тут у нас res и туда передают вызов нужной функции, в нашем случае функцию convert, а уже затем в аргументе promotion мы передаем просто переменную res. Без Скобок, так как код посчитает что это вызов функции. а вызов функции уже и так случился когда функцию convert передавали в переменную res





function test() {
	for (let i = 0; i < 5; i++) {
		console.log(i);
		if (i === 3) {
			return;
		}
	}
	console.log( "Этот код не будет выполнен, потому что функция полностью завершила свое выполнение после слова return. Так можно делать вместо использования директивы break, но отличие в том, что после return завершается не только цикл, но и вообще вся функция" );
}

test();

function doNothing() {}
doNothing();

console.log(doNothing() === undefined); // true. Все функции всегда хоть что-то возвращают, даже когда в функции ничего нет, возвращается undefined




/* В итоге надо запомнить, что если функция должна вернуть какой-то результат для дальнейшей работы с ним, нужно использовать ключевое слово return, если же нет, и результат нам нужен только единожды, то использовать return необязательно */

// ЗАДАЧИ С ФУНКЦИЯМИ



/* 1) Создайте функцию, которая будет на вход принимать 1 аргумент с именем человека и возвращать строку.

Пример: вызов функции sayHello('Антон') возвращает строку "Привет, Антон!".
P.S. возвращать - это использовать ключевое слово return.

 */

function something(someName) {
    return `hello mr ${someName}!`
}

let result_1 = something('yakov');

console.log(result_1);

/* 2) Создайте функцию, которая принимает в себя 1 аргумент в виде целого числа и возвращает массив из трех чисел: одно на 1 меньше, сам аргумент, и число на 1 больше.

Пример: вызов функции returnNeighboringNumbers(5) возвращает массив в виде [4, 5, 6].

*/

function returnNeighboringNumbers(num) {
    return [num - 1, num, num + 1];
}

let result_2 = returnNeighboringNumbers(3) // [2, 3, 4]

console.log(result_2);



// 3) Создайте функцию, которая будет принимать в себя 2 аргумента, оба числа. Первое число - это база, второе число - это сколько раз нужно будет повторить это число в прогрессии. (Смотри пример ниже). Функция должна возвращать строку (или число в особых случаях, о которых ниже), где эти числа идут по порядку, разделенные тремя дефисами "---". После последнего числа их не должно быть.

// Если аргументы не являются числами, равны или меньше нуля - то возвращать просто сообщение об ошибке. (Проверяем через оператор typeof)

// Примеры:

// Вызов функции getMathResult(5, 3) даст ответ 5---10---15

function getMathResult(num_1, num_2) {
	if (typeof num_2 !== "number" || typeof num_1 !== "number" || num_1 <= 0 || num_2 <= 0) {
		return "Ошибка!";
	}

	let str = "";

	for (let i = 1; i <= num_2; i++) {
		if (i === num_2) {
			str = str + (num_1 * i);
		} else {
			str = str + (num_1 * i + "---");
		}
	}

	return str;
}

console.log(getMathResult(5, 3));

'use strict';

// Простые типы данных

let num = 4; // Тип данных число

let str = 'my name is Jeembo'; // Тип данных строка

let bool = true;
let bool_2 = false; // Логический тип данных, истина или ложь. 

let SomethingNotExist = null; // Специальное значение «null» Значение null не относится ни к одному из типов выше, а образует свой отдельный тип, состоящий из единственного значения null: В JavaScript null не является «ссылкой на несуществующий объект» или «нулевым указателем», как в некоторых других языках. Это просто специальное значение, которое имеет смысл «ничего» или «значение неизвестно».

let big = 'very big number';/*   В JavaScript тип «number» не может содержать числа больше, чем 2 в 53 степени(или меньше, чем -2 в 53 степени для отрицательных). Это техническое ограничение вызвано их внутренним представлением. 2 в 53 степени – это достаточно большое число, состоящее из 16 цифр, поэтому чаще всего проблем не возникает. Но иногда нам нужны действительно гигантские числа, например в криптографии или при использовании метки времени («timestamp») с микросекундами.
Тип BigInt был добавлен в JavaScript, чтобы дать возможность работать с целыми числами произвольной длины.Чтобы создать значение типа BigInt, необходимо добавить n в конец числового литерала:
 */


// let und = a; // Специальное значение «undefined» Значение undefined, как и null, образует свой собственный тип, состоящий из одного этого значения. Оно имеет смысл «значение не присвоено».Если переменная объявлена, но в неё ничего не записано, то её значение как раз и есть undefined:



// Объекты (комплексные типы данных)

// Объекты нужны для хранения любых типов данных, в них могут содержаться все те типы о которых было сказано выше. А также в объектах могут быть функции (в объектах они называются методы) и массивы

let obj = {
    name: 'John',
    age: 25,
    isBald: true,
    sayHello: function () {
        console.log('hello everyone!');
    }
};
/*  Вот это и есть объект, в нем данные идут в формате ключ: значение. У объектов есть как свойства так и методы (функции) */


obj.isHappy = true; // таким образом мы можем добавлять новые свойства в объект

obj['isSad'] = false; // или так, через кв. скобки. Но в таком случае свойство нужно брать в кавычки

console.log(obj);

console.log(obj.name); // Обращение к свойству объекта
console.log(obj['isSad']); // или так


let arr = ['strawberry.jpg', 'orange.png', 6, true];

// Массив это не отдельный тип данных, а частный случай объекта. В нем данные идут по порядку

console.log(arr[2]); // Обращение к свойствам массива. Ключ это номер по порядку (начинается с 0) значение это соотвественно значение которое под определенным номером


let result = confirm('Are u here?');
console.log(result);


// let answer = prompt('Вам есть 18?', ''); // Чтобы не вводил в ответ пользователь это будет тип данных строка

let answer_2 = +prompt('Вам есть 18?', ''); // НО если добавить к промту плюксик, будет тип данных "число" и с ним уже можно будет работать как с числом

console.log(answer_2 + 8);

let mas = [];

mas[0] = prompt('ваше имя');
mas[1] = prompt('ваша фамилия');
mas[2] = prompt('сколько лет'); // Таким образом записываются значения в массив из вопросов пользователя

console.log(mas); 



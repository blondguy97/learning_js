document.addEventListener('DOMContentLoaded', () => {



    'use strict';



    /* Повторим как у нас загружается страница в браузере, когда index.html попадает в браузер, он идентифицирует страницу как html и дальше начинает ее загрузку, он смотрит что это html с определенным остановленным языком в атрибуте lang, и дальше начинает грузить тег head, подгружает метатеги, далее грузит title страницы, после этого идут теги link, со шрифтами, css стилями, возможно js и так далее, потом после этого всего идет в тег body и начинает строить верстку тег за тегом, обычно внизу идут js скрипты, и браузер после всего начинает работать с ними, после всего страница заканчивает свою загрузку и все завершено.
    
    Большая ошибка пихать скрипты в самое начало страницы, так как возможно в скриптах прописаны взаимодействия с версткой, которая еще не успела построиться в DOM дереве, вторая беда что при загрузке 
    js скрипт блокирует страницу, если скрипт очень объемный. Частично 1ую проблему можно решить событием 
DOMContentLoaded, когда скрипт даже если он будет в начале, загрузиться, он будет ждать своего выполнения пока верстка на страницы ни построиться, но вторую проблему мы решить уже не можем таким образом, то есть если скрипт будет слишком большим, страница повиснет.
Обычно мы все это обходили тем, что ставили скрипты в самом низу страницы. Но что если верстка будет огромной, тысячи тегов например, пользователю придется ждать пока вся верстка загрузиться, и только потом будут грузиться скрипты, то есть интерактив.

    
    */


    const p = document.querySelectorAll('p')

    console.log(p);


    /*   Тут я расскажу о двух атрибутах в теге подключения js-скриптов,
     они нужны чтобы скрипты загружались 
    когда этого потребуется, то есть НЕ РАНЬШЕ чем основная верстка на странице
иначе скрипты просто не будут работать */

    // 1) defer - этот атрибут сообщает браузеру что он должен продолжать
    // обрабатывать страницу и загружать скрипт в фоновом режиме, а затем запустить
    // скрипт когда он загрузится окончательно
    // Пару особенностей defer - 
    //     --Подключение скриптов атрибутом defer никогда не блокирует страницу, 
    //     даже если поставить подключение скриптов в начале страницы
    //     --Скрипты с таким атрибутом всегда выполняются когда наше
    //     DOM-дерево уже готово. То есть когда вся верстка уже сформируется
    //     --Скрипты с defer выполняются относительно друг друга, то есть последовательно,
    //     как элементы в верстке то есть друг за другом, 
    //     даже если второй следующий после первого легче по содержанию

    // Выглядит скрипт полностью так: <script defer src="script.js"></,>

    // 2) async - этот атрибут в отличии от предыдущего никого не ждет,
    // то есть он загружается когда до него дойдет страница, он загружается 
    // в фоновом режиме также как и defer, но при этом он запускается как только он 
    // был загружен. Остальные подключенные скрипты не ждут скрипты с async, и скрипты
    // с async не ждут остальные скрипты, они становятся абсолютно независимыми
    // скрипты с атрибутом async нужны в основном при подключении различных метрик
    // когда они не подвязаны ни под вертску, ни под остальные скрипты
    // Так что если ставить атрибут asyns, то надо быть уверенным что 
    // он не подвязан под верстку и он не должен быть зависимым от других скриптов 

    // Также у нас есть возможность поместить подключение скрипта ДИНАМИЧЕСКИ, то есть через js

    const script = document.createElement('script');
    script.src = 'js/test.js';

    document.body.append(script);

    /*  По умолчанию динамически подключенные скрипты ведут себя 
        как будто у них атрибут async
         Чтобы отключить это поведение необходимо сделать так */

    script.async = false;


    /* А что сделать так чтобы было поведение загрузки defer, пишем это */

    script.defer = true;

    /* Кстати удобно обернуть все это действо в функцию и вызывать одни и те же блоки кода с разными путями к скриптам */

    function loadScript(sourse) {
        const script = document.createElement('script');
        script.src = sourse;
        script.async = false;
        document.body.append(script);
    }

    loadScript('js/secondTest.js')
});
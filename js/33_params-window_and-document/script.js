'use strict';

document.addEventListener('DOMContentLoaded', function () {
   /* Поговорим о браузере, какие глобальные объекты в нем есть и как с ними работать
   Существуют несколько основных понятий в работе js относительно человека

   1) document - это наша html страница, ну то есть объект который содержит всю html структуру

   2) window - это наше окно в котором показывается документ, то есть если наш браузер уменьшить в размере или поднять консоль разработчика, измениться именно window, а не тот же документ. То есть по факту мы изменяем высоту того окошка, сквозь которое мы смотрим на контент который есть на сайте

   3) screen - это весь наш монитор, в него включаются даже все системные панели, то есть все люди с разными мониторами, имеют разный screen. Используется screen крайне редко

   Элементы на странице имеют много различных свойств, но на практике используется 4-5 из них
   Измерения элементов в коде js пишутся без единиц измерения, то есть без ремов, пикселей и так далее

   Если нам нужно получить ширину или высоту элемента включая padding но без border и прокрутки можно использовать свойства clientWidth и clientHeight
   */


   const box = document.querySelector('.box');
   const btn = document.querySelector('button');



   const width = box.clientWidth;
   const height = box.clientHeight;


   console.log(width, height);


   /* Зачем вообще получать ширину и высоту элементов?
   в CSS могут использоваться совсем разные единицы измерения, потому что есть и относительные величины которые ориентируются на размер экрана пользователя, поэтому прямиком из css сложновато вот так просто получить конкретные размеры элементов в пикселях.Поэтому удобно получать размеры элементов без конкретных единиц измерения, при помощи clientWidth и clientHeight мы можем получить высоты и длину элемента и что то с ними дополнительно сделать, например можно в скрипте увеличить высоту или ширину в два раза и добавить еще какой то контент

   Если нам надо получить контент уже с учетом полосы прокрутки, border и margin, для этого уже нужны offsetWidth и offsetHeight

   */


   const fullWidth = box.offsetWidth;
   const fullHeight = box.offsetHeight;


   console.log(fullWidth, fullHeight);

   /* Но наш элемент в верстке со вертикальным скроллом и фиксированной высотой, полную высоту элемента мы можем получить с помощью scrollHeight (и если есть горизонтальный скролл то существует свойство scrollWidth, но оно не учитывает ширину прокрутки) */

   const scrollHeight = box.scrollHeight;

   console.log(scrollHeight); // получили размер уже куда больше чем раньше, так как измерили весь контент в прокрутке, а не только видимую часть


   btn.addEventListener('click', function () {
      box.style.height = box.scrollHeight + 'px';
   }) // Здесь мы по обработчику событий "клику" присваиваем нашему box высоту scrollHeight, то есть самую полную высоту во всем контентом и прибавляем единицу измерения пиксели, так как по умолчанию у scrollHeight нет единиц измерения

   /* Также одни из самых популярных свойств это scrollTop и scrollLeft 
   scrollTop поможет узнать сколько у нас есть отлистанного контента который не показывается

   Также scrollTop и scrollLeft могут быть модифицированы 
    */

   btn.addEventListener('click', function () {
      console.log(box.scrollTop);
   }) // Таким образом при клике выводим в консоль кол-во отлистанных пикселей которые находятся в невидимой зоне

   /* Часто на практике нам нужно получать координаты элемента на странице, они начинаются в левой верхнем углу экрана 
    */

   console.log(box.getBoundingClientRect()); /* С помощью этого метода мы получаем полные координаты элемента на странице, все координаты которые есть идут от левого верхнему угла */

   console.log(box.getBoundingClientRect().top); /* Получаем значение только топа */

   /* Часто нам нужно знать какие css стили применены к элементу на странице, например узнать какой дисплей стоит, блок или например none, и на основании этого уже сформировать какую то структуру, чтобы это сделать есть метод который позволяет получить стили элемента, но стили это не обычные, а computed, они все заданы в понятных для браузера расчетах, то есть не проценты например. а пиксели. Получив эти стили напрямую менять мы их не можем, а можем только посмотреть  */

   const getStyle = window.getComputedStyle(box);

   console.log(getStyle); /* Получаем большой объект со всеми computed стилями */




   console.log(getStyle.display);
   /* block. 
Получаем конкретное значение свойства display */

   /* Две важные особенности которые относятся к этому методу getComputedStyle()
      1) С помощью его мы можем получать стили псевдоэлементов. При помощи JS мы не можем работать с псевдоэлементами, их не получить со страницы. Но стили псевдоэлементов мы получить можем
      2) не стоит путать computed стили и инлайн стили, инлайн стили приоритетнее и их можно изменить, а computed стили можно только получить 

    */


   /* Если же нужно взаимодействовать напрямую c html, чтобы например проверить сколько отлистал пользователь, и изменить это значение при каком то условии, то обращаться нужно к свойству documentElement, объекта document.
   
   то есть просто, document.Element
   */


   /* Также есть еще 2 метода которые занимаются изменением положения страницы, это scrollBy и scrollTo 
   1) window.scrollBy() скроллит страницу относительно текущего положения, у него есть 2 параметра, x и y, первое скроллит по горизонтали, второй, что чаще всего, по вертикали,

   window.scrollBy(0, 200); Проскроллит на 200 пикселей вниз от текущего положения


   Вместо координат в scrollBy() можно передать объект с тремя параметрами:

      top задаёт количество пикселей для прокрутки по оси Y;
   left — то же самое, но по оси X;
   behavior определяет поведение прокрутки.По умолчанию резкое auto, но можно указать плавный smooth.
   window.scrollBy({
      top: 100,
      left: 0,
      behavior: 'smooth'
   })
   
   2) window.scrollTo() скроллит страницу уже относительно всей страницы,

   window.scrollTo(0, 200);
   Проскроллит на 200 пикселей вниз от самого начала страницы

   window.scrollTo(0, 0);
   Проскроллит страницу на самый верх

   Вместо координат в scrollTo() можно передать объект с тремя параметрами:

   top задаёт количество пикселей для прокрутки по оси Y;
   left то же самое, но по оси X;
   behavior определяет поведение прокрутки.По умолчанию резкое auto, но можно указать плавный smooth.

   window.scrollTo({
      top: 100,
      left: 0,
      behavior: 'smooth'
   })


   
   */

})
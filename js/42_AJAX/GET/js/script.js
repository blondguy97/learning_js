'use strict';

document.addEventListener('DOMContentLoaded', function () {

	/* Одна из популярных вещей где используется AJAX это фильтры в интернет магазинах
	или в поиске при наборе запроса идут подсказки 

	AJAX от англ.Asynchronous JavaScript and XML — «асинхронный JavaScript и XML»
	Чтобы весь наш фронтенд умел общаться с сервером нам нужны HTTP запросы

	Чтобы все происходило ассинхронно и без перезагрузки страницы, нам и нужна технология AJAX
	*/

	/* Реализуем поведение где мы будем вводить числа в один инпут, и на основании данных с "сервера", на деле нашего файла ajax, мы будем во второй инпут выводить конвертированную сумму 

	AJAX реализуется несколькими способами.
	Мы посмотрим на все, начиная самым старым, заканчивая самым новым
	*/


	const inputRub = document.querySelector('#rub');
	const inputUsd = document.querySelector('#usd');


	inputUsd.setAttribute('disabled', true);
	inputUsd.style.cursor = 'not-allowed';
	/* Делаем так что инпут с выводом Долларов будет недоступен для взаимодействия, только для вывода результата */


	/* Событие input — срабатывает при каждом изменении значения в поле. Подходит для моментальных изменений;

	Событие change— срабатывает когда изменяемый элемент теряет фокус: например, при переходе к другому полю или клику на другую часть страницы. Подходит для окончательных изменений*/

	inputRub.addEventListener('input', () => {
		const request = new XMLHttpRequest(); // Присваиваем переменной request конструктор который создает новые объекты. Получаем экземпляр класса

		//?  request.open(method,(используется для запросов GET/POST и остальных) url (путь к серверу, этому может быть файлик или что угодно), async (отвечает за ассинхронность, если нужно выключить, пишем false, но изначально стоит в позиции true, отключать вообще не рекомендуется), login, password (некоторые запросы мы можем делать только имея логин и пароль)); 

		/*  Метод open НЕ открывает соединение между фронтендом и бэкендом, а пока что только собирает настройки которые в будущем помогут сделать запрос, в скобках указаны параметры которые мы можем передавать этому методы, не все параметры обязательны */

		request.open('GET', 'js/current.json');
		/* Первым параметром используем GET запрос (он нужен чтобы получить какие-либо данные от сервера), вторым же мы берем файл или сервер откуда берем инфомацию, пока в качестве сервера используем наш json файл, также важно добавить чтобы запросы посылаются именно из нашего html файла, поэтому пути надо оформлять относительно html файла*/

		request.setRequestHeader('Content-type', 'application/json; charset=utf-8');
		/* Когда мы отправляем запрос, нам нужно указать также что именно мы отправляем, какая это инфа, в чем она закодирована, делается это для того чтобы наши трансферные протоколы четко понимали что они передают, json файл напримере или какие то изображения.
		В нашем случае указываем тип контента json и кодировку */

		request.send();
		/* Отправляем запрос 
		Метод send может еще принимать какой-то body, то есть те данные которые уходят на сервер, они существуют только в POST и других методах, в GET body нет
		*/

		/* После такого как мы получили ответ от сервера, с ним нужно начать что-то делать */




		/* Это были методы объекта, теперь посмотрим на свойства */


		// status - свойство показывает статус от нашего запроса, все что начинаются с двойки это успех, с 4рки это ошибка клиента, например ошибка 404

		// statusText - тоже самое что и status, только в виде текста, например ответ 200 это "OK" 

		// response - получаем ответ от сервера, то что задал бекенд разраб, то что мы должны использовать на клиенте

		/* 

		readyState - содержит текущее состояние нашего запроса, состояния оцениваются от 0 до 4

			0 (UNSENT): Объект создан, но метод open() еще не был вызван.
			1 (OPENED): Метод open() был вызван.
			2 (HEADERS_RECEIVED): Метод send() был вызван, и доступны заголовки и статус.
			3 (LOADING): Загрузка; получаются данные, если они есть.
			4 (DONE): Операция завершена полностью. 

		*/



		request.addEventListener('readystatechange', () => {
			// событие load – происходит, когда наш запрос полностью загрузился и получен какой-либо результат, включая ответы с HTTP-ошибкой, например 404.
			// событие readystatechange – отслеживает статус нашего запроса в данный, текущий момент. Ведь мы не можем ответить через какое время нам ответит сервер
			if (request.readyState === 4 && request.status === 200) {
				// Условие что все данные пришли, то есть в позиции DONE, и статус запроса 200, то есть также успешно.

				console.log(request.response);
				// response в нашем случае, это тот объект который лежит у нас в JSON файле
				console.log(request.status); // 200
				console.log(request.statusText); // OK
				console.log(request.readyState); // 4


				const dollarRate = JSON.parse(request.response); /* Преобразует строку JSON в объект JavaScript. Это полезно, когда сервер возвращает данные в формате JSON, который является строкой. Метод JSON.parse разбирает эту строку и превращает её в объект JavaScript. */


				console.log(dollarRate);

				inputRub.value.trim() === ''  // Запрещаем писать пробелы в Рублевый инпут
				

					inputUsd.value = (Number(inputRub.value) / dollarRate.current.course).toFixed(2);
					/* Выполняем необходимые расчеты */


			} 
			else {
				inputUsd.value = 'Что-то пошло не так';
				/* Делаем это отвлетвление если произошла какая то ошибка */

			}
		});

	})








});





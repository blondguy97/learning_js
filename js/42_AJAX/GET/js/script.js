'use strict';

document.addEventListener('click', function () {

    /* Одна из популярных вещей где используется AJAX это фильтры в интернет магазинах
    или в поиске при наборе запроса идут подсказки 

    AJAX от англ.Asynchronous JavaScript and XML — «асинхронный JavaScript и XML»
    Чтобы весь наш фронтенд умел общаться с сервером нам нужны HTTP запросы

    Чтобы все происходило ассинхронно и без перезагрузки страницы, нам и нужна технология AJAX
    */

    /* Реализуем поведение где мы будем вводить числа в один инпут, и на основании данных с "сервера", на деле нашего файла ajax, мы будем во второй инпут выводить конвертированную сумму 
    
    AJAX реализуется несколькими способами.
     Мы посмотрим на все, начиная самым старым, заканчивая самым новым
    */


    const inputRub = document.querySelector('#rub'),
        inputUsd = document.querySelector('#usd');


    /*Событие input — срабатывает при каждом изменении значения в поле;
      Событие change— срабатывает когда изменяемый элемент теряет фокус: например, при переходе к другому полю или клику на другую часть страницы.*/
    inputRub.addEventListener('input', () => {
        const request = new XMLHttpRequest(); // Присваиваем переменной request конструктор который создает новые объекты

        //?  request.open(method,(используется для запросов GET POST и так остальных) url (путь к серверу, этому может быть файлик или что угодно), async (отвечает за ассинхронность, если нужно выключить, пишем  false, но изначально стоит в позиции true, отключать вообще не рекомендуется), login, password(некоторые запросы мы можем делать только имея логин и пароль));  
        /*  Метод open НЕ открывает соединение между фронтендом и бэкендом, а пока что только собирает настройки которые в будущем помогут сделать запрос, в скобках указаны параметры которые мы можем передавать этому методы, не все параметры обязательны */

        request.open('GET', 'js/current.json');
        /* Первым параметром используем GET запрос (он нужен чтобы получить какие-либо данные от сервера), вторым же мы берем файл или сервер откуда берем инфомацию, пока в качестве сервера используем наш json файл, также важно добавить чтобы запросы посылаются именно из нашего html файла, поэтому пути надо оформлять относительно html файла*/

        request.setRequestHeader('Content-type', 'application/json; charset=utf-8');
        /* Когда мы отправляем запрос, нам нужно указать также что именно мы отправляем, какая это инфа, в чем она закодирована, делается это для того чтобы наши трансферные протоколы четко понимали что они передают, json файл напримере или какие то изображения.
        В нашем случае указываем тип контента json и кодировку */

        request.send();
        /* Отправляем запрос 
        Метод send может еще принимать какой-то body, то есть те данные которые уходят на сервер, они существуют только в POST и других методах, в GET body нет
        */

        /* После такого как мы получили ответ от сервера, с ним нужно начать что-то делать */




        /* Это были методы объекта, теперь посмотрим на свойства */


        // status - свойство показывает статус от нашего запроса, все что начинаются с двойки это успех, с 4рки это ошибка клиента, например ошибка 404

        // statusText - тоже самое что и status, только в виде текста, например ответ 200 это "OK" 

        // response - получаем ответ от сервера, то что задал бекенд разраб

        // readyState - содержит текущее состояние нашего запроса, состояния оцениваются от 0 до 4


        request.addEventListener('load', () => { 
            // событие load – происходит, когда получен какой-либо ответ, включая ответы с HTTP-ошибкой, например 404.
            if (request.status === 200) {
                console.log(request.response);
                // response в нашем случае, это тот объект который лежит у нас в JSON файле
                console.log(request.status);

                const dollarRate = JSON.parse(request.response);
                inputUsd.value = (Number(inputRub.value) / dollarRate.current.course).toFixed(2);

            } else {
                inputUsd.value = 'Что-то пошло не так';
                inputUsd.setAttribute('disabled', true);
                /* Делаем это отвлетвление если произошла какая то ошибка */


 
            }
        });

    })



});



// // Тоже самое только наоборот, конвертируем доллары в рубли


// document.addEventListener('click', function () {


//     const inputRub = document.querySelector('#rub'),
//         inputUsd = document.querySelector('#usd');

//     inputUsd.addEventListener('input', () => {
//         const request = new XMLHttpRequest(); 

//         request.open('GET', 'js/current.json');


//         request.setRequestHeader('Content-type', 'application/json; charset=utf-8');


//         request.send();


//         request.addEventListener('load', () => {
//             if (request.status === 200) {

//                 const rubRate = JSON.parse(request.response);
//                 inputRub.value = (Number(inputUsd.value) * rubRate.current.course).toFixed(2);

//             } else {
//                 inputRub.value = 'Что-то пошло не так';
//                 inputRub.setAttribute('disabled', true);
//             }
//         });

//     })



// });
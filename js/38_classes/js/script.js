'use strict';

document.addEventListener('DOMContentLoaded', function () {

    /*
    Можно сказать что Классы это красивая обертка функций конструкторов, классы внутри это все те же функции
    Функции конструкторы и классы нужны потому, что в веб приложениях принято использовать шаблонизацию, то есть создать единый шаблон, чтобы каждый раз не создавать какой то слайдер, статью и прочее. От этого шаблона(компонента) будет отпачковывать уже отдельные экземпляры которые будут помещаться на сайте
    Классы, как и функции-конструкторы, служат нам для создания новых объектов
    */

    /* Итак, создание класса. Он всегда должен начинаться с большой буквы, так принято */

    class Rectangle {
        constructor(height, width) {
            this.height = height;
            this.width = width;
        }

        calcArea() {
            return console.log(this.height * this.width);
        }

    }

    const square = new Rectangle(10, 10);
    /* В переменную square мы передаетм экземпляр класса, у которого есть 2 свойства,  
       height и width, а также один метод - calcArea, которые он взял у своего класса Rectangle
       */

    square.calcArea(); // 100. Метод сработал

    const bigSquare = new Rectangle(20, 100); /* Создаем другой экземпляр класса, по факту другой объект с такими же свойствами и методами как и у его класса Rectangle, но со своими аргументами, от чего мы получим другой результат работы  */

    bigSquare.calcArea(); // 2000. Метод сработал

/* в объектно-ориентированном программировании есть термин
1) Абстракция, это когда мы отделяем концепцию(шаблон по которому мы что то создаем, то есть например наш класс Rectangle) от ее экземпляра, это уже конкретные объекты которые отпачковались от класса  
2) Наследование - способность объекта или класса базироваться на другом объекте или классе, На практике, наследование позволяет создавать более обобщенные(родительские) и более специфичные(дочерние) классы, что делает код более модульным, читаемым и легко поддерживаемым.

Например, если у вас есть класс "Животное", который имеет свойство "количество ног"
и метод "двигаться", то класс "Собака" может наследовать эти свойства и метод, а также добавить свои собственные, такие как "лаять".Это позволяет избегать повторения кода и упрощает организацию иерархии объектов.

*/

class ColoredRectangle extends Rectangle {  
/* extends означает что класс ColoredRectangle будет наследовать все свойства и методы от класса Rectangle */
    constructor(height, width, bgСolor) {
        super(height, width); // Этот метод вызывает свойства и методы родителя, в нашем случае это все перейдет от класса Rectangle.  super() должен всегда идти на первои месте в конструкторе
        this.bgСolor = bgСolor;
    }

    showColor() {
        console.log(`Цвет прямоугольника будет: ${this.bgСolor}`);
    }
}

const div = new ColoredRectangle(20, 10, 'Красный');

div.calcArea(); /* 200
Применяем метод из родительского класса */

div.showColor(); /* Цвет прямоугольника будет: Красный
Применяем новообретенный собственный метод */


});
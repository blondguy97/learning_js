'use strict';

// Функция - это блок программного кода на языке JavaScript, который определяется один раз и может выполняться, или вызываться, многократно.

function showMessage() {
    console.log('hello');
}

showMessage(); // Чтобы вызвать пользоваться функциями, всегда необходимо помнить о том что их надо вызывать. Функции следует называть глаголом с припиской того над чем выполняется действие. GetName, showWindow. Есть и анонимные функции, без имени, они выполняются только один рази больше нигде не используются

function test(text) {
    console.log(text);
}

test('hello boy');

// В скобки функции можно записывать параметры в виде переменных  и использовать их в блоке кода, а затем при вызове функции писать в скобках аргументы функции и получается прелесть в том что впри каждом новом вызове функции можно подставлять разные данные и получать различные результаты работы одной и той же функции. Параметров и аргументов функций можно добавлять бесконечно.

function test_2() {
    let num = 20;
}

console.log(num); // Если бы объявляем переменную внутри функции, снаружи она становится недоступной, это называется локальными переменными.


let x = 20;

function test_3(text) {
    console.log(text);
    x = 22;
}
test_3('hi');

console.log(x); // Функции легко могут коммуницировать с глобальными переменными, то есть доставать снаружи переменные и внутри себя даже изменять их.
// Кстати, если добавить let, var или const к переменной x внутри функции, то переменные x внутри функции и снаружи функции, станут совершенно разными переменными, глобальной и локальной. Хоть и с одним именем, если же использовать какую либо переменную внутри функции, когда будет выполняться код, она будет сканировать всю функцию в поиске этой самой переменной. Если она ее не находит, она выходит из функции и начинает искать эту переменную уже в глобальном окружении, и если находит одноименную переменную, использует уже ее значение.





function calc(a, b) {
    return (a + b);
}

 
console.log(calc(2, 5));
console.log(calc(5, 5));
console.log(calc(10, 2));
console.log(calc(11, 4));


// Ключевое слово return позволяет функции вернуть наружу что-то, какое-то значение. Как в примере выше, то есть здесь результатом работы данной функции будет сумма a и b. Когда функция доходит внутри себя до слова return, следующие инструкции внутри блока кода, будут недосягаемы. после return нет смысла что-то писать. Функция после return заканчивается. Код становится unreachable, то есть недосягаемым

function ret() {
    let num = 50;
    return num;
}

let anotherNum = ret();

console.log(anotherNum); // Получаем 50, как и в локальной переменной num в функции ret, потому что функция возвращает именно ее наружу.

// Есть несколько видов функций
// 1) Function declaration. Классическая запись функции, как мы писали выше. Ее особенность в том что ее можно вызвать еще до того как она была создана. 
// 2) Function expression (функциональное выражение) ее синтаксис будет ниже. (для примера) Такая функция присваивается переменной. В противовес предыдущей функции, ее можно использовать только тогда после того как она была создана
// 3) Стрелочные функции (самый современный синтаксис). Она не имеет своего контекста вызова (об этом будет в уроках позже) они более компактны и элегантны, а еще при желании их можно записать еще компактнее, если надо, погугли


let logger = function () {
    console.log('i am Function expression');
}; // Function expression

logger(); // i am Function expression
 

/* 

logger(); 

let logger = function () {
    console.log('i am Function expression');
}; // ТАК РАБОТАТЬ НЕ БУДЕТ 


*/





let something = (a, b) => {
    return a + b;
}; // Стрелочная функция


let arrowFunc = something(5, 5);

console.log(arrowFunc);


let something_2 = (a, b) => {
    console.log(`i love ${a} and ${b}`);
}; // Стрелочная функция

something_2('icecream', 'burgers'); // i love icecream and burgers

let something_3 = (a, b) => {
    console.log(a + b);
}; // Стрелочная функция

something_3(5, 5); // 10



const usdCurr = 92;
const eurCurr = 100;
const yenCurr = 80;

function convert(amount, course) {
    console.log(amount * course);
}

convert(23, usdCurr);
convert(11, eurCurr);
convert(22, eurCurr); // Этот пример показывает универстальность аргументов в функции. Соблюдаем принцип DRY, (Dont Repeat Yourself)





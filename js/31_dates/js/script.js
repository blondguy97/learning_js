'use strict'

document.addEventListener('DOMContentLoaded', function () {
    /* Data - это специфический объект который содержит в себе методы и свойства которые относятся ко времени */


    const now = new Date();
    /*   создаем новую дату c помощью конструктора new (позже о конструкторах поговорим) и помещаем ее в переменную now
            new Date это сегодняшняя дата (Правда разница будет во времени на 3 часа, так как тут все считается по Гринвичу, а Московское время на 3 часа опережает его */


    console.log(now); // 2023-10-12T18:14:42.904Z, хотя у меня 2023-10-12T21:14:42.904Z


    console.log(now.getFullYear()); // 2023
    console.log(now.getMonth()); // 9. Месяцы считаются с нуля, в реальности у меня 10 месяц, но так как январь это нулевой месяц, а не первый, 10 это 9ый
    console.log(now.getDate()); // 12
    console.log(now.getDay()); // 4. Нумерация начинается с воскресения. воскресение это нулевой день, суббота шестой  
    console.log(now.getHours()); // Получаем часы которые сейчас у нас  
    console.log(now.getUTCHours()); // Получаем часы по UTC, то есть на три часа меньше чем у меня сейчас, то есть Московское  


    /* Также можем получить часы, минуты, секунды и миллисекунды */



    /* Чтобы передать в объект date, какое то время, то есть год, месяц, день, часы, минуты секунды надо передать это в параметры  */

    /* Wed Nov 01 2023 20:00:00 
Почему я задал 10ый месяц, то есть октябрь, а посчиталось что ноябрь? Потому что здесь месяцы считаются с нуля до 11, а не до 12ти. И то есть нулевой месяц это январь*/

    /* Кроме прямой передачи строки в параметры date, можно также передать кол-во миллисекунд которые также будут превращены в дату. Любая дата которая есть в js - хранится в миллисекундах, это timeStamp, кол-во миллисекунд отсчитывается с начала 1970 года */

    const now2 = new Date(0); /* Передаем в параметры 0 миллисекунд */

    console.log(now2);
    /* Thu Jan 01 1970 03:00:00 

Получаем 1 января 1970ого, почему 3 ночи, а не 12 ровно? Потому что по Гринвичу мое Московское время опережает на 3 часа, а в js все считается по Гринвичу. То есть любую дату конвертировать в миллисекунд. а их обратно в даты. 
Если надо получить дату ДО 1970 года, нужно просто использовать отрицательное кол-во миллисекунд */


    console.log(now.getTimezoneOffset());
    /* -180
    Получаем разницу в минутах нашим локальным временем по стране и UTC, разница между московским 
    временем и UTS +3 часа
    */

    console.log(now.getTime()); /* Получаем так называемый timeStamp, то есть кол-во миллисекунд прошедших с 1ого января 1970 года, оттуда обычно идет отсчет в js */

    /* Это были метод геттеры, то есть мы получали что-то из объекта Date, сейчас будут методы сеттеры, то есть мы будем что то устанавливать. То есть мы можем не только создать дату и получить из нее что то, но и установить свое 
    
    То есть все то что мы рассмотрели выше с приставкой get (методов больше, просто мы рассмотрели не все из них). можно использовать и с приставкой set
    */

    const newNow = new Date();

    console.log(newNow); // Если устанавливать в переменную объект Date без каких-то конкретных параметров, время берется с нашего локального компьютера

    newNow.setHours(18, 40, 10); /* Меняем время которое у меня сейчас, на 18 часов 40 минут нынешнего дня. То есть первый параметр часы, второй минуты, третий если надо секунды */

    console.log(newNow);
    /* Сверху мы изменили время нынешего дня 
       и теперь получаем * сегодняшний день * 18:40:10

       */

    /* Даты мы можем использовать для измерения каких-то промежутков времени */

    let start = new Date();

    for (let i = 1; i <= 50000; i++) {
        console.log(i);
    }

    let end = new Date();

    alert(`Цикл отработал за ${end - start} мил.сек.`)
    /* Получаем как иногда говорят, бенчмарк, то есть тест производительности функции, цикла или чего угодно 
    Берем первую дату когда все началось, потом последнюю и вычисляем их разницу.
    В примере выше мы увидели разницу в миллисекундах

    */

    alert(`Цикл отработал за ${Math.round(((end - start) / 1000))} сек.`)

    /* В этом примере делим разницу на тысячу и округляем до целого числа с помощью метода round объекта Math и получили разницу в секундах*/




})